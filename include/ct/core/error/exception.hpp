
#ifndef _CHRONOTRIX_FRWK_EXCEPTION_HPP_
#define _CHRONOTRIX_FRWK_EXCEPTION_HPP_

#include <ct/config.hpp>
#include <ct/core/export.hpp>

namespace ct {

	namespace detail {
		struct exception_data {
			const char * what;
			bool should_free;
		};
		extern void copy_exception_data(const exception_data * from, exception_data * to);
	}

	////////////////////////////////////////////////////////////
	/// @class Exception
	/// @brief Represents an Chronotrix exception.
	///
	////////////////////////////////////////////////////////////
	class CT_CORE_API Exception {
	protected:
		detail::exception_data _data;

	public:
		////////////////////////////////////////////////////////////
		/// @brief Default Constructor
		/// @param message Description of this message
		///
		////////////////////////////////////////////////////////////
		explicit Exception(cstr const message = "unknown") NOEXCEPT;

		////////////////////////////////////////////////////////////
		/// @brief Copy constructor
		///
		////////////////////////////////////////////////////////////
		Exception(const Exception & other) NOEXCEPT;

		////////////////////////////////////////////////////////////
		/// @brief Destructor
		///
		////////////////////////////////////////////////////////////
		virtual ~Exception() NOEXCEPT;

		////////////////////////////////////////////////////////////
		/// @brief Get string identifying this exception
		///
		/// @return A pointer to c-string with description related to this exception.
		///
		////////////////////////////////////////////////////////////
		NODISCARD virtual const char * what() const NOEXCEPT;

		////////////////////////////////////////////////////////////
		/// @brief Copy exception
		///
		////////////////////////////////////////////////////////////
		Exception operator=(const Exception & rhs) NOEXCEPT;
	};

} // namespace ct

#endif
