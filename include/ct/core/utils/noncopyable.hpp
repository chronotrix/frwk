
#ifndef _CHRONOTRIX_FRWK_NONCOPYABLE_HPP_
#define _CHRONOTRIX_FRWK_NONCOPYABLE_HPP_

#include <ct/config.hpp>

namespace ct {

	////////////////////////////////////////////////////////////
	/// @brief Non copyable object
	///
	////////////////////////////////////////////////////////////
	class NonCopyable {
	protected:
	#if defined(CT_CXX11_DEFAULT_FUNCTIONS)
		////////////////////////////////////////////////////////////
		/// @brief Default constructor
		///
		////////////////////////////////////////////////////////////
		constexpr NonCopyable() = default;

		////////////////////////////////////////////////////////////
		/// @brief Default destructor
		///
		////////////////////////////////////////////////////////////
		~NonCopyable() = default;
	#else
		NonCopyable() {}
		~NonCopyable() {}
	#endif

	#if defined(CT_CXX11_DELETE_FUNCTIONS)

		////////////////////////////////////////////////////////////
		/// @brief Non copyable constructor
		///
		////////////////////////////////////////////////////////////
		NonCopyable(const NonCopyable &) = delete;

		////////////////////////////////////////////////////////////
		/// @brief Copy assignment is not permited
		///
		////////////////////////////////////////////////////////////
		NonCopyable & operator=(const NonCopyable &) = delete;
	#else
	private:
		NonCopyable(const NonCopyable &);
		NonCopyable & operator=(const NonCopyable &);
	#endif
	};
} // namespace ct

#endif

////////////////////////////////////////////////////////////
/// @file noncopyable.hpp
/// @class ct::NonCopyable
/// @ingroup core
///
/// Detailed description goes here
///
////////////////////////////////////////////////////////////
